"""
Flask application for Business Data Analysis System.
Handles HTTP routes and web interface.
"""
import os
import sys
import time
import shutil
from datetime import datetime
from flask import Flask, render_template, request, jsonify

# Add project root to Python path
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)
os.chdir(project_root)  # Set working directory to project root

# Import business analyst service
from src.application.business_analyst_service import BusinessAnalystService

# Initialize Flask app
app = Flask(__name__)
app.template_folder = os.path.join(project_root, 'src', 'web', 'templates')
app.static_folder = os.path.join(project_root, 'src', 'web', 'static')

# Create static directories if they don't exist
os.makedirs(os.path.join(app.static_folder, 'visualizations'), exist_ok=True)

# Initialize the business analyst service
analyst_service = BusinessAnalystService()

# Store analysis history
analysis_history = []

@app.route('/')
def index():
    """Render the main page"""
    # Get available datasets for dropdown
    datasets = analyst_service.list_datasets()
    return render_template('index.html', history=analysis_history, datasets=datasets)

@app.route('/analyze', methods=['POST'])
def analyze():
    """Process a data analysis query"""
    try:
        # Get the query from the form
        query = request.form.get('query')
        if not query:
            return jsonify({'error': 'No query provided'}), 400
        
        # Get selected dataset
        dataset_name = request.form.get('dataset')
        
        # Execute the analysis
        start_time = time.time()
        result = analyst_service.analyze_query(query, dataset_name)
        execution_time = time.time() - start_time
        
        # Create timestamp for this analysis
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Handle visualizations
        vis_paths = process_visualizations(timestamp)
        
        # Store the analysis result
        analysis_record = {
            'query': query,
            'dataset': dataset_name,
            'result': result,
            'execution_time': f"{execution_time:.2f} seconds",
            'timestamp': timestamp,
            'visualizations': vis_paths
        }
        
        # Add to history (keep only the latest 10 for simplicity)
        analysis_history.insert(0, analysis_record)
        if len(analysis_history) > 10:
            analysis_history.pop()
        
        return jsonify(analysis_record)
    
    except Exception as e:
        import traceback
        return jsonify({
            'error': str(e),
            'traceback': traceback.format_exc()
        }), 500

def process_visualizations(timestamp):
    """Process visualization files generated by the analysis"""
    vis_paths = []
    viz_files = [
        'sales_by_category.png', 
        'sales_by_month.png', 
        'sales_by_region.png', 
        'sales_by_year.png'
    ]
    
    static_viz_dir = os.path.join(app.static_folder, 'visualizations')
    
    for viz_file in viz_files:
        source_path = os.path.join(project_root, viz_file)
        if os.path.exists(source_path):
            # Create a timestamped filename to avoid overwriting
            file_name, file_ext = os.path.splitext(viz_file)
            new_filename = f"{file_name}_{timestamp}{file_ext}"
            dest_path = os.path.join(static_viz_dir, new_filename)
            
            # Copy the file to static directory
            shutil.copy2(source_path, dest_path)
            
            # Add to visualization paths (using relative path for templates)
            vis_paths.append(f"/static/visualizations/{new_filename}")
    
    return vis_paths

@app.route('/history')
def history():
    """Return analysis history"""
    return jsonify(analysis_history)

@app.route('/datasets')
def list_datasets():
    """Return available datasets"""
    datasets = analyst_service.list_datasets()
    return jsonify(datasets)

if __name__ == '__main__':
    # Run the app
    app.run(host='0.0.0.0', port=8080, debug=True)